# mkdir directory and cd into it
mkcd(){
	mkdir -p "$@" && cd $_;
}

# perform ocr on a given file
ocr(){
	y="`pwd`/$1"
	echo Will create a searchable PDF for $y

	x=`basename "$y"`
	name=${x%.*}

	mkdir "$name"
	cd "$name"

	# splitting to individual pages
	gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=tiff24nc -r600 -dTextAlphaBits=4 -o out_%04d.tiff -f "$y"

	# process each page
	for f in $( ls out_*.tiff ); do
		# extract text
		tesseract -l deu -psm 3 $f ${f%.*} pdf
		rm $f
	done

	# combine all pages back to a single file
	gs -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=../${name}_searchable.pdf *.pdf

	cd ..
	rm -rf $name
}

# sleep for X seconds, then use text-to-speed notifcation
function timer() {
	[ $# -ne 1 ] && exit 1 
	[ $1 -ge 0 ] || exit 1 && TIME=$1
	(sleep $1 && say "Time is up")&
}

# up directory tree X number of directories
function up() {
	COUNTER="$@";
	# default $COUNTER to 1 if it isn't already set
	if [[ -z $COUNTER ]]; then
		COUNTER=1
	fi
	# make sure $COUNTER is a number
	if [ $COUNTER -eq $COUNTER 2> /dev/null ]; then
		nwd=`pwd` # Set new working directory (nwd) to current directory
		# Loop $nwd up directory tree one at a time
		until [[ $COUNTER -lt 1 ]]; do
			nwd=`dirname $nwd`
			let COUNTER-=1
		done
		cd $nwd # change directories to the new working directory
	else
		# print usage and return error
		echo "usage: up [NUMBER]"
		return 1
	fi
}

# timestamp printing function. 
# converts a supplied timestamp to a human-readable date
# if no argument is supplied print the current timestamp
function ts() {
	if [ $# -eq 0 ]; then
		date +%s;
	else
		for t in "$@"; do
			if [ $(uname) = "Darwin" ]; then
				date -r "$t"
			else
				date -d @$t
			fi
		done
	fi
}

# cd to path of the currently active finder-window
function cdf() {
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# open Finder and cd to current directory
function fcd() {
  open -a Finder ./
}

# external ip from https://github.com/rsp/scripts/blob/master/externalip
function extip() {
  case "$1" in
    ""|dns) dig +short myip.opendns.com @resolver1.opendns.com ;;
    http) curl -s http://whatismyip.akamai.com/ && echo ;;
    https) curl -s https://4.ifcfg.me/ ;;
    ftp) echo close | ftp 4.ifcfg.me | awk '{print $4; exit}' ;;
    telnet) nc 4.ifcfg.me 23 | grep IPv4 | cut -d' ' -f4 ;;
    *) echo Bad argument >&2 && exit 1 ;;
  esac
}

# from https://github.com/nicksp/dotfiles/shell/shell_functions
function extract() {
  if [ -f "$1" ] ; then
    local filename=$(basename "$1")
    local foldername="${filename%%.*}"
    local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
    local didfolderexist=false
    if [ -d "$foldername" ]; then
      didfolderexist=true
      read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
      echo
      if [[ $REPLY =~ ^[Nn]$ ]]; then
        return
      fi
    fi
    mkdir -p "$foldername" && cd "$foldername"
    case $1 in
      *.tar.bz2) tar xjf "$fullpath" ;;
      *.tar.gz) tar xzf "$fullpath" ;;
      *.tar.xz) tar Jxvf "$fullpath" ;;
      *.tar.Z) tar xzf "$fullpath" ;;
      *.tar) tar xf "$fullpath" ;;
      *.taz) tar xzf "$fullpath" ;;
      *.tb2) tar xjf "$fullpath" ;;
      *.tbz) tar xjf "$fullpath" ;;
      *.tbz2) tar xjf "$fullpath" ;;
      *.tgz) tar xzf "$fullpath" ;;
      *.txz) tar Jxvf "$fullpath" ;;
      *.zip) unzip "$fullpath" ;;
      *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

ducks() {
  if hash gnumfmt 2>/dev/null; then
    du -cks * | sort -nr | head -n11 | awk '/total$/ { X = $1 }; { percent = $1 / X * 100; cmd = "gnumfmt --to=iec --from=iec --format=\"%.1f\" "$1"K"; cmd  | getline ss; close(cmd); $1 = "";  printf "%s (%.1f%%) %s\n", ss, percent, $0 }'
  else
    du -cks * | sort -nr | head -n11 | awk '/total$/ { X = $1 }; { percent = $1 / X * 100; ss = $1 / 1024; $1 = "";  printf "%sM (%.1f%%) %s\n", ss, percent, $0 }'
  fi
}

